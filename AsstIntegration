#!/bin/bash

## User will need to be added to groups: dialout, !audio
declare -A SCRIPT_STATE_OPTIONS
SCRIPT_STATE_OPTIONS=(
  ["none"]=1
  ["dev"]=1
  ["plant_sensor"]=1
  ["calendar"]=1
  ["pillbox"]=1
  ["setup"]=1
  ["virtmic_config"]=1
  ["virtmic_play"]=1
  ["virtmic_undo"]=1
  ["virtmic_dev"]=1
  ["virtmic_reset"]=1
  ["setup_config"]=1
  ["GA_sample"]=1
)

#### USER STATE
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
SCRIPT_USER=$(printf '%s\n' "${SUDO_USER:-$USER}")
SCRIPT_OWNER="$USER"
USER_HOME="/home/${SCRIPT_USER}"
USER_IS_ROOT=$([ "$SCRIPT_OWNER" = "root" ] && echo "true" || echo "false")
CURRENT_SCRIPT_STATE="none"
GA_CONFIG="${SCRIPT_DIR}/GA_RPi.conf"



#### Option Input
while [ -n "$1" ]; do
  case "$1" in
  -s)
    CURRENT_SCRIPT_STATE="$2"
    if [ "${SCRIPT_STATE_OPTIONS[$CURRENT_SCRIPT_STATE]}" ]; then :
    else
      echo "${CURRENT_SCRIPT_STATE} is not a valid option"
      CURRENT_SCRIPT_STATE="none"
    fi
    shift
    ;;
  --client-secrets)
    ## Check for client secret
    CLIENT_SECRET_PATH="$2"
    [ ! -f "${CLIENT_SECRET_PATH}" ] && echo "ERROR: Client-Secret path not recognized." && CURRENT_SCRIPT_STATE="none" ||  echo "JSON File Found."
    shift
    ;;
  *)
    echo "Option $1 not recognized"
    ;;
  esac
  shift
done

# Read configuration varables stored in GA_RPi.conf
read_conf() {
  . GA_RPi.conf
}

# Install dependencies for Embedded Python Google Assistant
install_GA_DEP() {
  sudo apt -qq update
  sudo apt -qq install expect arduino portaudio19-dev libffi-dev libssl-dev python3-dev python3-venv python-serial python3-serial pulseaudio -y
}

# Install Python Virtual Env and Google Assistant Sample Code
install_GA() {
  python3 -m venv env
  env/bin/python3 -m pip install --default-timeout=100 --upgrade pip setuptools wheel
  source env/bin/activate
  python3 -m pip install --default-timeout=100 --upgrade google-assistant-sdk[samples] google-auth-oauthlib[tool]
  google-oauthlib-tool --scope https://www.googleapis.com/auth/assistant-sdk-prototype --save --headless --client-secrets "${CLIENT_SECRET_PATH}"
}

# Create .asoundrc File
config_Speaker() {
  local ALSA_CONFIG="${USER_HOME}/.asoundrc"
  [ -f "${ALSA_CONFIG}" ] && mv "${ALSA_CONFIG}" "${ALSA_CONFIG}.bak"
  touch "${ALSA_CONFIG}"
  echo "pcm.!default {
    type asym
    capture.pcm 'mic'
    playback.pcm 'speaker'
    }
  pcm.mic {
    type plug
    slave {
      pcm 'hw:${MIC_addr}'
    }
  }
  pcm.speaker {
    type plug
    slave {
      pcm 'hw:${SPEAKER_addr}'
    }
  }" >> "${ALSA_CONFIG}"
}

config_VirtualMic() {
  echo "Configuring VirtualMic..."
  pactl load-module module-pipe-source source_name=virtmic file="${SCRIPT_DIR}"/virtmic format=s16le rate=16000 channels=1
  pactl set-default-source virtmic
  # Creation of .config/pulse could be handled in initial setup phase instead of every iteration of config_virtmic
  mkdir -p "${USER_HOME}"/.config/pulse && touch "${USER_HOME}"/.config/pulse/client.conf
  echo "default-source = virtmic" > "${USER_HOME}"/.config/pulse/client.conf
  echo "Done"
}

setup_CalendarAPI() {
  pip3 install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib

}

setup_SpeechRecog() {
  sudo apt install python3 python3-all-dev python3-pip build-essential swig git libpulse-dev libasound2-dev
  pip3 install pocketsphinx
}


play_VirtualMic() {
  echo "Playing query..."
  cat "${SCRIPT_DIR}"/pressCalendar/static_audio/calendar_query.raw > "${SCRIPT_DIR}"/virtmic
  sleep 2
  echo "Done"
}

undo_VirtualMic() {
  echo "Removing VirtualMic Config..."
  local PULSE_CONFIG="${USER_HOME}/.config/pulse/client.conf"
  pactl unload-module module-pipe-source
  [ -f "${PULSE_CONFIG}" ] && rm "${PULSE_CONFIG}" || echo "Pulse Config not loaded."
  echo "Done"
}

reset_VirtualMic() {
  pulseaudio -k
  undo_VirtualMic
}

# Used to test features to be implement
dev_VirtualMic() {
  config_VirtualMic
  echo "Intiate GA" && sleep 2
  play_VirtualMic
  undo_VirtualMic
}

setup_Integration() {
  if [ -n "$CLIENT_SECRET_PATH" ]; then
    [ ! -f "${GA_CONFIG}" ] && create_config
    read_conf
    install_GA_DEP
    install_GA
    config_Speaker
    config_VirtualMic
    reset_VirtualMic
  else
    echo "[ERROR]: Missing one or more Setup Parameters (--client-secrets)."
    echo "[INFO]: Exiting..."
  fi
}

# Startup for Smart Plant Python script
start_Plant() {
  python3 "${SCRIPT_DIR}"/plantSense/plantSense_rpi.py
}

# Startup for Google Assistant Env + Velostat Calendar
start_Calendar() {
  read_conf
  #shellcheck source=src/env/bin/activate
  source "${SCRIPT_DIR}/env/bin/activate"
  python3 "${SCRIPT_DIR}/pressCalendar/velo_detect.py" "${RPI_PROJECT}" "${RPI_MODEL}"
}

config_conf_content() {
  echo "RPI_MODEL='$RPI_MODEL'"
  echo "RPI_PROJECT='$RPI_PROJECT'"
  echo "MIC_addr='$MIC_addr'"
  echo "SPEAKER_addr='$SPEAKER_addr'"
}

create_config() {
  echo "GA_RPi.conf not found, you will now be asked to make one."
  local RPI_MODEL RPI_PROJECT MIC_addr SPEAKER_addr
  local CONFIRM_STATE=0
  while [ "${CONFIRM_STATE}" == 0 ]; do
    printf "\nPlease provide Model ID, Project ID, Microphone (Device#,Card#), and Speaker(Device#,Card#) below:\n"
    read -rp "Model ID: " RPI_MODEL
    read -rp "Project ID: " RPI_PROJECT
    read -rp "Microphone Card & Device (#,#): " MIC_addr
    read -rp "Speaker Card & Device (#,#): " SPEAKER_addr
    printf "\n"
    echo "Model ID: $RPI_MODEL"
    echo "Project ID: $RPI_PROJECT"
    echo "Microphone: $MIC_addr"
    echo "Speaker: $SPEAKER_addr"
    printf "\nAre the details above correct?\n"
    select yn in "Yes" "No"; do
      case $yn in
      Yes)
        CONFIRM_STATE=1
        break
        ;;
      No) break ;;
      esac
    done
  done

  if [ -f "${GA_CONFIG}" ]; then
    if [ -f "${GA_CONFIG}.bak" ]; then
      rm -rf "${GA_CONFIG}.bak"
    fi
    mv "${GA_CONFIG}" "${GA_CONFIG}.bak"
  fi
  config_conf_content >> "${GA_CONFIG}"
}

run_GoogleAssistant() {
  read_conf
  source env/bin/activate
  googlesamples-assistant-pushtotalk --project-id "${RPI_PROJECT}" --device-model-id "${RPI_MODEL}"
}

# Main Script Handler
script_Main() {
  while [ "${CURRENT_SCRIPT_STATE}" != "none" ]; do
    echo "${CURRENT_SCRIPT_STATE}"
    case $USER_IS_ROOT in
    true)
      case $CURRENT_SCRIPT_STATE in
      dev)
	      read_conf
	      CURRENT_SCRIPT_STATE="none"
        ;;
      *)
        echo "[ERROR] Script should not be run as 'root' user"
        echo "[INFO] Exiting script"
        CURRENT_SCRIPT_STATE="none"
        ;;
      esac
      ;;
    false)
      case $CURRENT_SCRIPT_STATE in
      GA_sample)
        run_GoogleAssistant
        CURRENT_SCRIPT_STATE="none"
        ;;
      setup_config)
        create_config
        CURRENT_SCRIPT_STATE="none"
        ;;
      virtmic_config)
        config_VirtualMic
        CURRENT_SCRIPT_STATE="none"
        ;;
      virtmic_play)
        play_VirtualMic
        CURRENT_SCRIPT_STATE="none"
        ;;
      virtmic_undo)
        undo_VirtualMic
        CURRENT_SCRIPT_STATE="none"
        ;;
      virtmic_dev)
        dev_VirtualMic
        CURRENT_SCRIPT_STATE="none"
        ;;
      virtmic_reset)
        reset_VirtualMic
        CURRENT_SCRIPT_STATE="none"
        ;;
      plant_sensor)
        start_Plant
        CURRENT_SCRIPT_STATE="none"
        ;;
      calendar)
        start_Calendar
        CURRENT_SCRIPT_STATE="none"
        ;;
      setup)
	      setup_Integration
        CURRENT_SCRIPT_STATE="none"
        ;;
      *)
        echo "Invalid Script State: ${CURRENT_SCRIPT_STATE}"
        CURRENT_SCRIPT_STATE="none"
        ;;
      esac
      ;;
    esac
  done
}

sleep 1
script_Main
exit 0
