#!/bin/bash

## User will need to be added to groups: dialout, !audio
declare -A SCRIPT_STATE_OPTIONS
SCRIPT_STATE_OPTIONS=(
  ["none"]=1
  ["plant_sensor"]=1
  ["calendar"]=1
  ["pillbox"]=1
  ["setup"]=1
  ["virtmic_config"]=1
  ["virtmic_play"]=1
  ["virtmic_undo"]=1
  ["virtmic_dev"]=1
  ["virtmic_reset"]=1
)

#### USER STATE
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
SCRIPT_USER="$(logname)"
SCRIPT_OWNER="$USER"
USER_HOME="/home/${SCRIPT_USER}"
DEFAULT_SCRIPT_STATE="none"
USER_IS_ROOT=$([ "$SCRIPT_OWNER" = "root" ] && echo "true" || echo "false")
CURRENT_SCRIPT_STATE="none"

#### Option Input
while [ -n "$1" ]; do
  case "$1" in
  -s)
    CURRENT_SCRIPT_STATE="$2"
    if [[ ${SCRIPT_STATE_OPTIONS[$CURRENT_SCRIPT_STATE]} ]]; then :
    else
      echo "${CURRENT_SCRIPT_STATE} is not a valid option"
      CURRENT_SCRIPT_STATE="none"
    fi
    shift
    ;;
  --mic)
    MIC_test="$2"
    if [[ "$MIC_test" =~ .*",".* ]]; then
      MIC_address="${MIC_test}"
      echo "MICROPHONE SET TO: $MIC_address"
    fi
    shift
    ;;
  --speaker)
    SPEAKER_test="$2"
    if [[ "$SPEAKER_test" =~ .*",".* ]]; then
      SPEAKER_address="${SPEAKER_test}"
      echo "SPEAKER SET TO: $SPEAKER_address"
    fi
    shift
    ;;
  --client-secret)
    CLIENT_SECRET_PATH="$2"
    echo "${CLIENT_SECRET_PATH}"
    shift
    ;;
  *)
    echo "Option $1 not recognized" ;;
  esac
  shift
done

# Install dependencies for Embedded Python Google Assistant
install_GA_DEP() {
  sudo apt -qq update
  sudo apt -qq install expect arduino portaudio19-dev libffi-dev libssl-dev python3-dev python3-venv python-serial python3-serial pulseaudio -y
}

# Install Python Virtual Env and Google Assistant Sample Code
install_GA() {
  python3 -m venv env
  env/bin/python3 -m pip install --default-timeout=100 --upgrade pip setuptools wheel
  source env/bin/activate
  python3 -m pip install --default-timeout=100 --upgrade google-assistant-sdk[samples] google-auth-oauthlib[tool]
  google-oauthlib-tool --scope https://www.googleapis.com/auth/assistant-sdk-prototype --save --headless --client-secrets "${CLIENT_SECRET_PATH}"
}

# Create .asoundrc File
config_Speaker() {
  rm -rf ~/.asoundrc
  touch ~/.asoundrc
  echo "pcm.!default {
    type asym
    capture.pcm 'mic'
    playback.pcm 'speaker'
    }
  pcm.mic {
    type plug
    slave {
      pcm 'hw:${MIC_address}'
    }
  }
  pcm.speaker {
    type plug
    slave {
      pcm 'hw:${SPEAKER_address}'
    }
  }" >>~/.asoundrc
  amixer set Master 70%
}

config_VirtualMic() {
  echo "Configuring VirtualMic..."
  pactl load-module module-pipe-source source_name=virtmic file="${SCRIPT_DIR}"/virtmic format=s16le rate=16000 channels=1
  pactl set-default-source virtmic
  mkdir -p /home/pi/.config/pulse && touch /home/pi/.config/pulse/client.conf
  echo "default-source = virtmic" > /home/pi/.config/pulse/client.conf
  echo "Done"
}

play_VirtualMic() {
  echo "Playing query..."
  #ffmpeg -re -i "${SCRIPT_DIR}"/pressCalendar/static_audio/calendar_input.mp3 -f s16le -ar 16000 -ac - > "${SCRIPT_DIR}"/virtmic
  cat "${SCRIPT_DIR}"/pressCalendar/static_audio/calendar_query.raw > "${SCRIPT_DIR}"/virtmic
  sleep 2
  echo "Done"
}

undo_VirtualMic() {
  echo "Removing VirtualMic Config..."
  pactl unload-module module-pipe-source
  rm /home/pi/.config/pulse/client.conf
  #rm "${SCRIPT_DIR}"/virtmic
  echo "Done"
}

reset_VirtualMic() {
  pulseaudio -k
  undo_VirtualMic
}

dev_VirtualMic() {
  config_VirtualMic
  echo "Intiate GA" && sleep 2
  play_VirtualMic
  undo_VirtualMic
}

# Startup for Smart Plant Python script
start_Plant() {
  python3 "${SCRIPT_DIR}"/plantSense/plantSense_rpi.py
}

# Startup for Google Assistant Env + Velostat Calendar
start_Calendar() {
  source "${SCRIPT_DIR}"/env/bin/activate
  python3 "${SCRIPT_DIR}"/pressCalendar/velo_detect.py
}

# Main Script Handler
script_Main() {
  while [ "${CURRENT_SCRIPT_STATE}" != "none" ]; do
    case $USER_IS_ROOT in
    true)
      echo "Script should not be run as 'root' user"
      echo "Exiting script"
      CURRENT_SCRIPT_STATE="none"
      ;;
    false)
      case $CURRENT_SCRIPT_STATE in
      virtmic_config)
        config_VirtualMic
        CURRENT_SCRIPT_STATE="none"
        ;;
      virtmic_play)
        play_VirtualMic
        CURRENT_SCRIPT_STATE="none"
        ;;
      virtmic_undo)
        undo_VirtualMic
        CURRENT_SCRIPT_STATE="none"
        ;;
      virtmic_dev)
        dev_VirtualMic
        CURRENT_SCRIPT_STATE="none"
        ;;
      virtmic_reset)
        reset_VirtualMic
        CURRENT_SCRIPT_STATE="none"
        ;;
      plant_sensor)
        echo "Script State: Plant Sensor"
        start_Plant
        CURRENT_SCRIPT_STATE="none"
        ;;
      calendar)
        echo "Script State: Calendar"
        start_Calendar
        CURRENT_SCRIPT_STATE="none"
        ;;
      setup)
        echo "Script State: Setup"
        install_GA_DEP
        install_GA
        config_Speaker
        config_VirtualMic
        reset_VirtualMic
        CURRENT_SCRIPT_STATE="none"
        ;;
      *)
        echo "Invalid Script State: ${CURRENT_SCRIPT_STATE}"
        CURRENT_SCRIPT_STATE="none"
        ;;
      esac
      ;;
    esac
  done
}

sleep 1
script_Main
exit 0