#!/bin/bash

### SCRIPT INTERACTIONS
# Below are scripts that interact with this script
# velo_detect.py
# GA_calendar_trigger.sh
# GoogCal_api.py
# plantSense_rpi.py

declare -A SCRIPT_SETUP_OPTIONS=(
  ["googlesample"]=1
  ["virtmic"]=1
  ["calendar"]=1
  ["plant"]=1
)

declare -A SCRIPT_PROTO_OPTIONS=(
  ["calendar"]=1
  ["plant"]=1
  ["doorknob"]=1
)

declare -A SCRIPT_VIRTMIC_OPTIONS=(
  ["config"]=1
  ["undo"]=1
  ["reset"]=1
  ["play"]=1
)

declare -A CASE_ARRAY

#### USER STATE
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" >/dev/null 2>&1 && pwd)"
SCRIPT_USER=$(printf '%s\n' "${SUDO_USER:-$USER}")
SCRIPT_OWNER="$USER"
USER_HOME="/home/${SCRIPT_USER}"
USER_IS_ROOT=$([ "$SCRIPT_OWNER" = "root" ] && echo "true" || echo "false")
SCRIPT_CURRENT_STATE="none"
GA_CONFIG="${SCRIPT_DIR}/GA_RPi.conf"

#
error_incorrectDriver() {
  printf "[ERROR] Incorrect Driver Argument: %s\n" "$SCRIPT_DRIVER_STATE"
  printf "[INFO]Please enter ONE of the following: \n"
  printf "%s\n" "${!CASE_ARRAY[@]}"
  printf "\n[INFO]Exiting nixTools...\n"
  exit 1
}

#
check_ScriptDriver() {

  for K in "${!1[@]}"; do
    CASE_ARRAY[$K]=1
  done

  if [[ ${CASE_ARRAY[$SCRIPT_DRIVER_STATE]} ]]; then
    shift
  else
    printf "%s\n" "${!CASE_ARRAY[@]}"
    error_incorrectDriver
  fi
}

#
error_incorrectArg() {
  echo "$1 Not a valid argument for ${SCRIPT_CURRENT_STATE}"
  printf "Exiting Script...\n"
  exit 1
}

#
config_conf_content() {
  echo "RPI_MODEL='$RPI_MODEL'"
  echo "RPI_PROJECT='$RPI_PROJECT'"
  echo "MIC_addr='$MIC_addr'"
  echo "SPEAKER_addr='$SPEAKER_addr'"
}

#
create_config() {
  echo "GA_RPi.conf not found, you will now be asked to make one."
  local RPI_MODEL RPI_PROJECT MIC_addr SPEAKER_addr
  local CONFIRM_STATE=0
  while [ "${CONFIRM_STATE}" == 0 ]; do
    printf "\nPlease provide Model ID, Project ID, Microphone (Device#,Card#), and Speaker(Device#,Card#) below:\n"
    read -rp "Model ID: " RPI_MODEL
    read -rp "Project ID: " RPI_PROJECT
    read -rp "Microphone Card & Device (#,#): " MIC_addr
    read -rp "Speaker Card & Device (#,#): " SPEAKER_addr
    printf "\n"
    echo "Model ID: $RPI_MODEL"
    echo "Project ID: $RPI_PROJECT"
    echo "Microphone: $MIC_addr"
    echo "Speaker: $SPEAKER_addr"
    printf "\nAre the details above correct?\n"
    select yn in "Yes" "No"; do
      case $yn in
      Yes)
        CONFIRM_STATE=1
        break
        ;;
      No) break ;;
      esac
    done
  done

  if [ -f "${GA_CONFIG}" ]; then
    if [ -f "${GA_CONFIG}.bak" ]; then
      rm -rf "${GA_CONFIG}.bak"
    fi
    mv "${GA_CONFIG}" "${GA_CONFIG}.bak"
  fi
  config_conf_content >>"${GA_CONFIG}"
}

# Read configuration variables stored in GA_RPi.conf
read_conf() {
  [ ! -f "${GA_CONFIG}" ] && create_config
  . GA_RPi.conf
}

# Install dependencies for Embedded Python Google Assistant
install_GA_DEP() {
  sudo apt -qq update
  sudo apt -qq install expect arduino portaudio19-dev libffi-dev libssl-dev python3-dev python3-venv python-serial python3-serial pulseaudio -y
}

# Install Python Virtual Env and Google Assistant Sample Code
install_GA() {
  python3 -m venv env
  env/bin/python3 -m pip install --default-timeout=100 --upgrade pip setuptools wheel
  source env/bin/activate
  python3 -m pip install --default-timeout=100 --upgrade google-assistant-sdk[samples] google-auth-oauthlib[tool]
  google-oauthlib-tool --scope https://www.googleapis.com/auth/assistant-sdk-prototype --save --headless --client-secrets "${CLIENT_SECRET_PATH}"
}

# Create .asoundrc File
config_Speaker() {
  local ALSA_CONFIG="${USER_HOME}/.asoundrc"
  [ -f "${ALSA_CONFIG}" ] && mv "${ALSA_CONFIG}" "${ALSA_CONFIG}.bak"
  touch "${ALSA_CONFIG}"
  echo "pcm.!default {
    type asym
    capture.pcm 'mic'
    playback.pcm 'speaker'
    }
  pcm.mic {
    type plug
    slave {
      pcm 'hw:${MIC_addr}'
    }
  }
  pcm.speaker {
    type plug
    slave {
      pcm 'hw:${SPEAKER_addr}'
    }
  }" >>"${ALSA_CONFIG}"
}

config_VirtualMic() {
  echo "Configuring VirtualMic..."
  pactl load-module module-pipe-source source_name=virtmic file="${SCRIPT_DIR}"/virtmic format=s16le rate=16000 channels=1
  pactl set-default-source virtmic
  # Creation of .config/pulse could be handled in initial setup phase instead of every iteration of config_virtmic
  mkdir -p "${USER_HOME}"/.config/pulse && touch "${USER_HOME}"/.config/pulse/client.conf
  echo "default-source = virtmic" >"${USER_HOME}"/.config/pulse/client.conf
  echo "Done"
}

setup_CalendarAPI() {
  pip3 install --upgrade google-api-python-client google-auth-httplib2 google-auth-oauthlib

}

setup_SpeechRecog() {
  sudo apt install python3 python3-all-dev python3-pip build-essential swig git libpulse-dev libasound2-dev
  pip3 install pocketsphinx
}

play_VirtualMic() {
  echo "Playing query..."
  cat "${SCRIPT_DIR}"/pressCalendar/static_audio/calendar_query.raw >"${SCRIPT_DIR}"/virtmic
  sleep 2
  echo "Done"
}

undo_VirtualMic() {
  echo "Removing VirtualMic Config..."
  local PULSE_CONFIG="${USER_HOME}/.config/pulse/client.conf"
  pactl unload-module module-pipe-source
  [ -f "${PULSE_CONFIG}" ] && rm "${PULSE_CONFIG}" || echo "Pulse Config not loaded."
  echo "Done"
}

reset_VirtualMic() {
  pulseaudio -k
  undo_VirtualMic
}

# Used to test features to be implement
dev_VirtualMic() {
  config_VirtualMic
  echo "Intiate GA" && sleep 2
  play_VirtualMic
  undo_VirtualMic
}

setup_Integration() {
  if [ -n "$CLIENT_SECRET_PATH" ]; then
    [ ! -f "${GA_CONFIG}" ] && create_config
    read_conf
    install_GA_DEP
    install_GA
    config_Speaker
    config_VirtualMic
  else
    echo "[ERROR]: Missing one or more Setup Parameters (--client-secrets)."
    echo "[INFO]: Exiting..."
  fi
}

# Startup for Smart Plant Python script
start_Plant() {
  python3 "${SCRIPT_DIR}"/plantSense/plantSense_rpi.py
}

# Startup for Google Assistant Env + Velostat Calendar
start_Calendar() {
  read_conf
  #shellcheck source=src/env/bin/activate
  source "${SCRIPT_DIR}/env/bin/activate"
  python3 "${SCRIPT_DIR}/pressCalendar/velo_detect.py" "${RPI_PROJECT}" "${RPI_MODEL}"
}

# Activate embedded Google Assistant
run_GoogleAssistant() {
  read_conf
  source env/bin/activate
  googlesamples-assistant-pushtotalk --project-id "${RPI_PROJECT}" --device-model-id "${RPI_MODEL}"
}

# Handler for 'Virtmic' level script functions
script_Main_Virtmic() {
  case $USER_IS_ROOT in
  false)
    case $SCRIPT_CURRENT_STATE in
    play)
      play_VirtualMic
      ;;
    reset)
      reset_VirtualMic
      ;;
    undo)
      undo_VirtualMic
      ;;
    config)
      config_VirtualMic
      ;;
    *)
      echo "Unrecognized State, How did you get here?"
      exit 1
      ;;
    esac
    ;;
  true)
    echo "Cannot be run as root"
    exit 1
    ;;
  esac
}

# Handler for 'Prototype' level script functions
script_Main_Proto() {
  case $USER_IS_ROOT in
  false)
    case $SCRIPT_DRIVER_STATE in
    plant)
      start_Plant
      ;;
    calendar)
      start_Calendar
      ;;
    doorknob)
      echo "Update script_Main_Proto with a 'doorknob' function"
      ;;
    *)
      echo "Unrecognized State, How did you get here?"
      exit 1
      ;;
    esac
    ;;
  true)
    echo "Cannot be run as root"
    exit 1
    ;;
  esac
}

# Handler for 'Setup' level script functions
script_Main_Setup() {
  case $USER_IS_ROOT in
  false)
    case $SCRIPT_DRIVER_STATE in
    googlesample)
      setup_Integration
      ;;
    calendar_API)
      echo "Please update 'script_Main_Setup' with function"
      ;;
    speech_API)
      echo "Please update 'script_Main_Setup' with function"
      ;;
    CHECK)
      # Create check for all files dependent files
      ;;
    config)
      create_config
      ;;
    *)
      echo "Unrecognized State, How did you get here?"
      exit 1
      ;;
    esac
    ;;
  true)
    echo "Cannot be run as root"
    exit 1
    ;;
  esac
}

# Handler for 'GA' (Google Assistant) level script functions
script_Main_GA() {
  case $USER_IS_ROOT in
  false)
    case $GA_AUTO_STATE in
    true) # Prompt-less Google Assistant
      ;;
    false) # Google Assistant with Prompt
      run_GoogleAssistant
      ;;
    *)
      echo "Unrecognized State, How did you get here?"
      exit 1
      ;;
    esac
    ;;
  true)
    echo "Cannot be run as root"
    exit 1
    ;;
  esac
}

#### END Function Declarations

#### Option Input
while [ "${SCRIPT_CURRENT_STATE}" == "none" ]; do
  case "$1" in
  Setup)
    SCRIPT_CURRENT_STATE="$1"
    SCRIPT_DRIVER_STATE="${2:-"None"}"
    shift

    check_ScriptDriver "${SCRIPT_PROTO_OPTIONS[@]}"

    while [ -n "$1" ]; do
      case "$1" in
      --client-secrets)
        ## Check for client secret
        CLIENT_SECRET_PATH="$2"
        shift
        ;;
      *)
        echo "Not a valid argument"
        ;;
      esac
      shift
    done
    ;;
  Proto)
    SCRIPT_CURRENT_STATE="$1"
    SCRIPT_DRIVER_STATE="${2:-"None"}"
    shift

    check_ScriptDriver "${SCRIPT_PROTO_OPTIONS[@]}"
    ;;
  GA)
    SCRIPT_CURRENT_STATE="$1"
    GA_AUTO_STATE="false"
    shift
    while [ -n "${1-}" ]; do
      case "$1" in
      -e)
        GA_AUTO_STATE="true"
        shift
        ;;
      *)
        error_incorrectArg "$1"
        ;;
      esac
    done
    ;;
  Virtmic)
    SCRIPT_CURRENT_STATE="$1"
    SCRIPT_DRIVER_STATE="${2:-"None"}"
    shift

    check_ScriptDriver "${SCRIPT_PROTO_OPTIONS[@]}"
    ;;
  *)
    echo "$1 Not a valid option"
    echo "Exiting Script"
    exit 1
    ;;
  esac
done

script_Main() {
  echo "Script State: ${SCRIPT_CURRENT_STATE}"
  case $SCRIPT_CURRENT_STATE in
  Setup)
    script_Main_Setup
    ;;
  Proto)
    script_Main_Proto
    ;;
  GA)
    script_Main_GA
    ;;
  Virtmic)
    script_Main_Virtmic
    ;;
  *)
    echo "Unrecognized State, How did you get here?"
    exit 1
    ;;
  esac
}

script_Main
exit 0
